## Copyright (C) 2019 Jeremiah Orians
## Copyright (C) 2022 Andrius Å tikonas
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.


## ELF Header
#:ELF_base
7F 45 4C 46                     # e_ident[EI_MAG0-3] ELF's magic number

01                              # e_ident[EI_CLASS] Indicating 32 bit
01                              # e_ident[EI_DATA] Indicating little endianness
01                              # e_ident[EI_VERSION] Indicating original elf

03                              # e_ident[EI_OSABI] Set at 3 because FreeBSD is strict
00                              # e_ident[EI_ABIVERSION] Set at 0 because no one cares

00 00 00 00 00 00 00            # e_ident[EI_PAD]

02 00                           # e_type Indicating Executable
03 00                           # e_machine Indicating x86
01 00 00 00                     # e_version Indicating original elf

54 80 04 08                     # e_entry Address of the entry point
34 00 00 00                     # e_phoff Address of program header table
00 00 00 00                     # e_shoff Address of section header table

00 00 00 00                     # e_flags

34 00                           # e_ehsize Indicating our 52 Byte header

20 00                           # e_phentsize size of a program header table
01 00                           # e_phnum number of entries in program table

00 00                           # e_shentsize size of a section header table
00 00                           # e_shnum number of entries in section table

00 00                           # e_shstrndx index of the section names

## Program Header
#:ELF_program_headers
#:ELF_program_header__text
01 00 00 00                     # ph_type: PT-LOAD = 1
00 00 00 00                     # ph_offset

00 80 04 08                     # ph_vaddr
00 80 04 08                     # ph_physaddr

00 01 00 00                     # ph_filesz
00 01 00 00                     # ph_memsz

07 00 00 00                     # ph_flags: PF-X|PF-W|PF-R = 7
01 00 00 00                     # ph_align

#:ELF_text

; Where the ELF Header is going to hit
; Simply jump to _start
; Our main function
# :_start ; (0x8048054)
	58                          # POP_EAX                     ; Get the number of arguments
	5B                          # POP_EBX                     ; Get the program name
	5B                          # POP_EBX                     ; Get the actual input name
	31C9                        # XOR_ECX_ECX                 ; prepare read_only, ecx = 0
	31D2                        # XOR_EDX_EDX                 ; Extra sure, edx = 0
	6A 05                       # PUSH !5                     ; prepare to set eax to 5
	58                          # POP_EAX                     ; the syscall number for open()
	CD80                        # INT_80                      ; Now open that damn file
	89C6                        # COPY_EAX_to_ESI             ; Preserve the file pointer we were given

	5B                          # POP_EBX                     ; Get the actual output name
	66B9 4102                   # LOADI16_CX @577             ; Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	66BA C001                   # LOADI16_DX @448             ; Prepare file as RWX for owner only (700 in octal)
	6A 05                       # PUSH !5                     ; prepare to set eax to 5
	58                          # POP_EAX                     ; the syscall number for open()
	CD80                        # INT_80                      ; Now open that damn file
	89C2                        # COPY_EAX_to_EDX             ; Preserve the file pointer we were given

	; Our flag for byte processing
	6A FF                       # PUSH !-1
	5D                          # POP_EBP                     ; ebp = -1

	; temp storage for the sum
	31FF                        # XOR_EDI_EDI                 ; edi = 0

#:loop ; (0x8048077)
	; Read a byte
	E8 68000000                 # CALL %Read_byte

	; process byte
	E8 1B000000                 # CALL %hex

	; Deal with -1 values
	85C0                        # TEST
	7C F2                       # JL8 !loop

	; deal with toggle
	85ED                        # TEST_EBP_EBP                ; jump if ebp >= 0
	7D 06                       # JGE8 !print

	; process first byte of pair
	89C7                        # COPY_EAX_to_EDI
	31ED                        # XOR_EBP_EBP                 ; ebp = 0
	EB E8                       # JMP8 !loop

; process second byte of pair
#:print ; (0x804808F)
	; update the sum and store in output
	C1E7 04                     # SHLI8_EDI !4
	01F8                        # ADD_EDI_to_EAX

	; flip the toggle
	4D                          # DEC_EBP                     ; ebp = -1

	E8 39000000                 # CALL %write_byte

	EB DB                       # JMP8 !loop

#:hex ; (0x804809C)
	; Purge Comment Lines (#)
	3C 23                       # CMPI8_AL !35
	74 1E                       # JE8 !purge_comment

	; Purge Comment Lines (;)
	3C 3B                       # CMPI8_AL !59
	74 1A                       # JE8 !purge_comment

	; deal all ascii less than 0
	3C 30                       # CMPI8_AL !48
	7C 1F                       # JL8 !ascii_other

	; deal with 0-9
	3C 3A                       # CMPI8_AL !58
	7C 1F                       # JL8 !ascii_num

	; deal with all ascii less than A
	3C 41                       # CMPI8_AL !65
	7C 17                       # JL8 !ascii_other

	; deal with A-F
	3C 47                       # CMPI8_AL !71
	7C 1C                       # JL8 !ascii_high

	;deal with all ascii less than a
	3C 61                       # CMPI8_AL !97
	7C 0F                       # JL8 !ascii_other

	;deal with a-f
	3C 67                       # CMPI8_AL !103
	7C 12                       # JL8 !ascii_low

	; The rest that remains needs to be ignored
	EB 09                       # JMP8 !ascii_other

#:purge_comment ; (0x80480BE)
	; Read a byte
	E8 21000000                 # CALL %Read_byte

	; Loop if not LF
	3C 0A                       # CMPI8_AL !10
	75 F7                       # JNE8 !purge_comment

	; Otherwise return -1

#:ascii_other ; (0x80480C7)
	6A FF                       # PUSH !-1
	58                          # POP_EAX                     ; return -1
	C3                          # RET

#:ascii_num ; (0x80480CB)
	2C 30                       # SUBI8_AL !48
	C3                          # RET

#:ascii_low ; (0x80480CE)
	2C 20                       # SUBI8_AL !32                ; convert to uppercase

#:ascii_high ; (0x80480D0)
	2C 37                       # SUBI8_AL !55
	C3                          # RET

; Writes byte stored in al
#:write_byte ; (0x80480D3)
	; Print our Hex
	89D3                        # COPY_EDX_to_EBX             ; Where are we writing to
	52                          # PUSH_EDX                    ; protect fout
	6A 01                       # PUSH !1                     ; prepare to set edx to 1
	5A                          # POP_EDX                     ; set the size of chars we want
	50                          # PUSH_EAX                    ; Move output to stack
	89E1                        # COPY_ESP_to_ECX             ; What we are writing
	6A 04                       # PUSH !4                     ; prepare to set eax to 4
	58                          # POP_EAX                     ; the syscall number for write
	CD80                        # INT_80                      ; call the Kernel
	5B                          # POP_EBX                     ; deallocate stack
	5A                          # POP_EDX                     ; restore fout
	C3                          # RET

#:Read_byte ; (0x80480E4)
	; Attempt to read 1 byte from Input file
	52                          # PUSH_EDX                    ; protect fout
	6A 01                       # PUSH !1                     ; prepare to set edx to 1
	5A                          # POP_EDX                     ; set the size of chars we want
	53                          # PUSH_EBX                    ; allocate stack
	89E1                        # COPY_ESP_to_ECX             ; Where to put it
	89F3                        # COPY_ESI_to_EBX             ; Where are we reading from
	6A 03                       # PUSH !3                     ; prepare to set eax to 3
	58                          # POP_EAX                     ; the syscall number for read
	CD80                        # INT_80                      ; call the Kernel

	85C0                        # TEST                        ; check what we got
	74 03                       # JE8 !Done                   ; Got EOF call it done

	; load byte
	58                          # POP_EAX                     ; load char
	5A                          # POP_EDX                     ; restore fout
	C3                          # RET

#:Done ; (0x80480F9)
	; program completed Successfully
	31DB                        # XOR_EBX_EBX                 ; All is well, ebx = 0
	6A 01                       # PUSH !1
	58                          # POP_EAX                     ; put the exit syscall number in eax
	CD80                        # INT_80                      ; Call it a good day

#:ELF_end
